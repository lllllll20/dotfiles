#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

*  Server

#+begin_src emacs-lisp
  
  ;;start the server
  (server-start)

#+end_src

* Package manager

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (unless package--initialized)
    (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))


  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; what is this?? - required to auto install packages
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  
#+end_src

* User interface

#+begin_src emacs-lisp

    ;; Visuals 
  (setq inhibit-startup-message t) ;Disable the splash screen (to enable it again, replace the t with 0)
  (scroll-bar-mode -1) ; Disable visible scroll bar
  (tool-bar-mode -1) ; Disable toolbar
  (tooltip-mode -1)  ; Disable tooltips
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (set-face-attribute 'default nil :font "FreeSans" :height 140)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "FreeSans" :height 140)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "FreeSans" :height 140 :weight 'regular)

  ;; Enable transient mark mode
  (transient-mark-mode 1)

  ;; Enable visual-line-mode
  (defun me/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

#+end_src

* Org mode
** Config

#+begin_src emacs-lisp

        (use-package org
        :hook (org-mode . me/org-mode-setup))


      (global-set-key "\C-cl" 'org-store-link)
      (global-set-key "\C-ca" 'org-agenda)

      ;; org-capture notes

    (setq org-default-notes-file "~/notes/quick_notes.org")

    (setq org-capture-templates
          '(("n" "Quick Note" entry
             (file org-default-notes-file)
             "* %?\n %i" :empty-lines 1)
            ("r" "Recipe" entry
             (file+headline "~/notes/ideas.org" "Recipes to try")
             "** %?\n")
            ("j" "Journal entry" entry
             (file+datetree "~/notes/journal.org")
             "**** %U %^{Title}\n %?" :empty-lines 1)))
  
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

  
#+end_src

** Org-babel-tangle

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun me/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/computing/git/dotfiles/emacs/config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'me/org-babel-tangle-config)))

#+end_src

* Misc

** Doom themes

#+begin_src emacs-lisp
  
  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

** All the icons

#+begin_src emacs-lisp

  (use-package all-the-icons)
  
#+end_src

** Which key

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
 
#+end_src

** Doom modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

* Vertico

#+begin_src emacs-lisp

   (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

* Consult

#+begin_src emacs-lisp

  (use-package consult
  :demand t
  :bind ("C-s" . consult-line))
  
#+end_src

* Orderless

#+begin_src emacs-lisp

  (use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
  
#+end_src

* Embark

#+begin_src emacs-lisp

    (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
  
#+end_src

* Dired

#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :hook
    (dired-mode . dired-hide-dotfiles-mode)
    :bind
    (:map dired-mode-map ("." . dired-hide-dotfiles-mode)))

  ;; Dired - Store backups
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.backups/"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups

  ;; Avoid lock files
  (setq create-lockfiles nil)

  ;; Copy between open dired-buffers
  (setq dired-dwim-target t)

#+end_src

* Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/computing")
      (setq projectile-project-search-path '("~/computing")))
    (setq projectile-switch-project-action #'projectile-dired))
 
#+end_src

* Magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

* LSP

** Config

#+begin_src emacs-lisp

   (defun me/lsp-mode-setup ()
     (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
     (lsp-headerline-breadcrumb-mode))

    (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook
    (sh-mode . lsp)
    (lsp-mode . me/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))
    

   (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

 ;; (use-package lsp-ivy)

#+end_src

** Python

#+begin_src emacs-lisp

  (use-package python-mode
    :ensure nil
    :mode "\\.py\\'"
    :hook (python-mode . lsp-deferred))

  (use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  
  
#+end_src

[[https://emacs-lsp.github.io/lsp-pyright/][Pyright lsp website]]

** Shell
#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'sh-mode-hook 'flycheck-mode))

#+end_src

** Corfu

#+begin_src emacs-lisp

  (use-package corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-auto t)                  ; Enable auto completion
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-popupinfo-delay '(0.5 . 0.2))
    (corfu-preview-current 'insert) ; Do not preview current candidate
    (corfu-preselect-first nil)
    (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-SPC"      . corfu-insert-separator)
                ("TAB"        . corfu-next)
                ([tab]        . corfu-next)
                ("S-TAB"      . corfu-previous)
                ([backtab]    . corfu-previous)
                ("S-<return>" . corfu-insert)
                ("RET"        . nil))

    :init
    (global-corfu-mode)
    (corfu-history-mode)
    (corfu-popupinfo-mode) ; Popup completion info
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                corfu-quit-no-match t
                                corfu-auto nil)
                (corfu-mode))))

#+end_src

** Cape

#+begin_src emacs-lisp
(use-package cape
  :defer 10
  :bind ("C-c f" . cape-file)
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (defalias 'dabbrev-after-2 (cape-capf-prefix-length #'cape-dabbrev 2))
  (add-to-list 'completion-at-point-functions 'dabbrev-after-2 t)
  (cl-pushnew #'cape-file completion-at-point-functions)
  :config
  ;; Silence then pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))

#+end_src

** Yasnippet

#+begin_src emacs-lisp

  (use-package yasnippet
    :ensure t
    :init
    (setq yas-nippet-dir "~/.config/emacs/snippets")
    (yas-global-mode))
  (use-package yasnippet-snippets
    :ensure t :after yasnippet)
  
#+end_src

* Custom functions

#+begin_src emacs-lisp

    (defun me/vertico-notes ()
          "list everything recursively"
          (interactive)
          (let* ((cands (split-string
                         (shell-command-to-string "find ~/notes -type f") "\n" t)))
            (find-file (completing-read "File: " cands))))
          
    (defun me/batch-open-rad-notes ()
    (mapc #'find-file-noselect
          (directory-files-recursively "~/notes/Radiology notes/" "")))


    ;(defun me/gdl ()
    ;  (interactive)
    ;  (dired "~/downloads")) 



    ;; Key bindings

    ;(global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
    ;(define-key dired-mode-map (kbd "C-c gdl") 'me/gdl) 
    ;(global-set-key (kbd "C-c gdl") 'me/gdl) 

    (global-set-key (kbd "C-c gh") (lambda () (interactive) (dired "~/"))) 
    (global-set-key (kbd "C-c gtr") (lambda () (interactive) (dired "~/.local/share/Trash/files"))) 
    (global-set-key (kbd "C-c gdl") (lambda () (interactive) (dired "~/downloads")))
    (global-set-key (kbd "C-c gco") (lambda () (interactive) (dired "~/computing")))
    (global-set-key (kbd "C-c ggh") (lambda () (interactive) (dired "~/computing/git/")))
    (global-set-key (kbd "C-c ggd") (lambda () (interactive) (dired "~/computing/git/dotfiles/")))
    (global-set-key (kbd "C-c gmd") (lambda () (interactive) (dired "~/my_docs")))
    (global-set-key (kbd "C-c gfn") (lambda () (interactive) (dired "~/my_docs/financial/")))
    (global-set-key (kbd "C-c gta") (lambda () (interactive) (dired "~/my_docs/financial/Tax")))
    (global-set-key (kbd "C-c gps") (lambda () (interactive) (dired "~/my_docs/financial/Payslips")))
    (global-set-key (kbd "C-c gwd") (lambda () (interactive) (dired "~/work_docs")))                                
    (global-set-key (kbd "C-c gvi") (lambda () (interactive) (dired "~/media/videos")))                             
    (global-set-key (kbd "C-c gtt") (lambda () (interactive) (dired "~/media/videos/tutorials")))                   
    (global-set-key (kbd "C-c gph") (lambda () (interactive) (dired "~/media/photos")))                             
    (global-set-key (kbd "C-c gwp") (lambda () (interactive) (dired "~/media/pictures/wallpapers")))                
    (global-set-key (kbd "C-c g.c") (lambda () (interactive) (dired "~/.config")))                                  
    (global-set-key (kbd "C-c gmu") (lambda () (interactive) (dired "~/media/music")))                              
    (global-set-key (kbd "C-c gpi") (lambda () (interactive) (dired "~/media/pictures")))                           
    (global-set-key (kbd "C-c gtv") (lambda () (interactive) (dired "~/media/TV")))                                 
    (global-set-key (kbd "C-c gfi") (lambda () (interactive) (dired "~/media/Films")))                              
    (global-set-key (kbd "C-c gws") (lambda () (interactive) (dired "~/media/websites")))                           
    (global-set-key (kbd "C-c gsc") (lambda () (interactive) (dired "~/scripts")))                                  
    (global-set-key (kbd "C-c ggs") (lambda () (interactive) (dired "~/computing/git/scripts/")))                   
    (global-set-key (kbd "C-c g.t") (lambda () (interactive) (dired "~/.test")))                                    
    (global-set-key (kbd "C-c gme") (lambda () (interactive) (dired "~/media")))                                    
    (global-set-key (kbd "C-c grm") (lambda () (interactive) (dired "/run/media/")))                                
    (global-set-key (kbd "C-c gpm") (lambda () (interactive) (dired "~/phone_media")))                              
    (global-set-key (kbd "C-c goc") (lambda () (interactive) (dired "~/work_docs/Oncall")))                         
    (global-set-key (kbd "C-c gst") (lambda () (interactive) (dired "~/work_docs/ST5")))                            
    (global-set-key (kbd "C-c gtb") (lambda () (interactive) (dired "~/work_docs/Reading/Textbooks")))              
    (global-set-key (kbd "C-c g2b") (lambda () (interactive) (dired "~/work_docs/Reading/Textbooks/Exam/2b")))      
    (global-set-key (kbd "C-c gwg") (lambda () (interactive) (dired "~/work_docs/Reading/Guidelines/Ghali_UHW")))   
    (global-set-key (kbd "C-c gss") (lambda () (interactive) (dired "~/media/pictures/screenshots")))               
    (global-set-key (kbd "C-c gsi") (lambda () (interactive) (dired "~/media/pictures/saved_images")))              
    (global-set-key (kbd "C-c gbf") (lambda () (interactive) (dired "~/media/Books/fiction")))                      
    (global-set-key (kbd "C-c gbn") (lambda () (interactive) (dired "~/media/Books/non_fiction")))                  
    (global-set-key (kbd "C-c gbo") (lambda () (interactive) (dired "~/media/Books/")))                             
    (global-set-key (kbd "C-c gvn") (lambda () (interactive) (dired "~/media/videos/new")))                         
    (global-set-key (kbd "C-c gvl") (lambda () (interactive) (dired "~/media/videos/library")))                     
    (global-set-key (kbd "C-c gvi") (lambda () (interactive) (dired "~/media/videos")))                             
    (global-set-key (kbd "C-c gws") (lambda () (interactive) (dired "~/media/websites/")))                          
    (global-set-key (kbd "C-c gtp") (lambda () (interactive) (dired "~/computing/templates")))                      
    (global-set-key (kbd "C-c g.l") (lambda () (interactive) (dired "~/.local")))                                   
    (global-set-key (kbd "C-c gen") (lambda () (interactive) (dired "~/.test/envs")))                               
    (global-set-key (kbd "C-c gts") (lambda () (interactive) (dired "~/.test/scripts/")))                           
    (global-set-key (kbd "C-c glt") (lambda () (interactive) (dired "~/computing/laptop")))                         
    (global-set-key (kbd "C-c gdt") (lambda () (interactive) (dired "~/computing/desktop")))                        
    (global-set-key (kbd "C-c gy1") (lambda () (interactive) (dired "~/work_docs/ST1")))                            
    (global-set-key (kbd "C-c gy2") (lambda () (interactive) (dired "~/work_docs/ST2")))                            
    (global-set-key (kbd "C-c gy3") (lambda () (interactive) (dired "~/work_docs/ST3")))                            
    (global-set-key (kbd "C-c gy4") (lambda () (interactive) (dired "~/work_docs/ST4")))                            
    (global-set-key (kbd "C-c gcp") (lambda () (interactive) (dired "~/.test/cprog")))                              
    (global-set-key (kbd "C-c gsf") (lambda () (interactive) (dired "~/.shellfunctions")))                          
    (global-set-key (kbd "C-c gnn") (lambda () (interactive) (dired "~/notes")))
    (global-set-key (kbd "C-c gwr") (lambda () (interactive) (dired "~/work_docs/ST4/Rota")))
    (global-set-key (kbd "C-c gja") (lambda () (interactive) (dired "~/work_docs/Reading/Journal articles/")))
    (global-set-key (kbd "C-c gba") (lambda () (interactive) (dired "~/.local/share/lf")))
    (global-set-key (kbd "C-c gnv") (lambda () (interactive) (dired "~/.config/nvim")))
    (global-set-key (kbd "C-c gpp") (lambda () (interactive) (dired "~/.local/share/nvim/site/pack/packer/start/")))
    (global-set-key (kbd "C-c gse") (lambda () (interactive) (dired "/etc/))")))


    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (global-set-key (kbd "<C-M-left>") 'previous-buffer)
    (global-set-key (kbd "<C-M-right>") 'next-buffer)
    (global-set-key (kbd "C-c n") #'me/vertico-notes)
    ;(global-set-key (kbd "C-.") 'other-window)

#+end_src

* Mysterious

#+begin_src emacs-lisp

  (put 'erase-buffer 'disabled nil) ; what does this do?
  (put 'dired-find-alternate-file 'disabled nil)

#+end_src

